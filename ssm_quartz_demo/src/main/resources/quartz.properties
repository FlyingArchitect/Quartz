# Default Properties file for use by StdSchedulerFactory
# to create a Quartz Scheduler Instance, if a different
# properties file is not explicitly specified.

#Quartz的属性配置文件主要包括三方面的信息：
#
#1)集群信息；
#
#2)调度器线程池；
#
#3)任务调度现场数据的保存。
# 配置好quartz.properties属性文件后，我们只要**将它放在类路径下，
# 然后运行我们的程序，即可覆盖在quartz.jar包中默认的配置文件

#·调度器属性

#第一部分有两行，分别设置调度器的实例名(instanceName) 
#和实例 ID (instanceId)。属性 org.quartz.scheduler.instanceName 
#可以是你喜欢的任何字符串。它用来在用到多个调度器区分特定的调度器实例。多个调度器通常用在集群环境中。
#现在的话，设置如下的一个字符串就行：org.quartz.scheduler.instanceName :
#DefaultQuartzScheduler实际上，这也是当你没有该属性配置时的默认值。
#
#调度器的第二个属性是 org.quartz.scheduler.instanceId。和 instaneName 
#属性一样，instanceId 属性也允许任何字符串。这个值必须是在所有调度器实例中是唯一的，尤其是在
#一个集群当中。假如你想 Quartz 帮你生成这个值的话，可以设置为 AUTO。如果 Quartz 框架
#是运行在非集群环境中，那么自动产生的值将会是 NON_CLUSTERED。假如是在集群环境下使用 Quartz，
#这个值将会是主机名加上当前的日期和时间。大多情况下，设置为 AUTO 即可。

#============================================================================
# Configure Main Scheduler Properties
#============================================================================
#org.quartz.threadPool.threadCount，配置线程池的容量，即表示同时最多可运行的线程数量。在生产环境，此参数应根据实际情况配置。
org.quartz.scheduler.instanceName: dufy_test
org.quartz.scheduler.instanceId = AUTO

org.quartz.scheduler.rmi.export: false
org.quartz.scheduler.rmi.proxy: false
org.quartz.scheduler.wrapJobExecutionInUserTransaction: false
#============================================================================
# Configure ThreadPool
#============================================================================
org.quartz.threadPool.class: org.quartz.simpl.SimpleThreadPool
org.quartz.threadPool.threadCount: 2
org.quartz.threadPool.threadPriority: 5
org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread: true

org.quartz.jobStore.misfireThreshold: 60000
#============================================================================
# Configure JobStore
#============================================================================
 
#default config
#org.quartz.jobStore.class: org.quartz.simpl.RAMJobStore

#其中org.quartz.jobStore.class是指明quartz的持久化用数据库来保存，
#而org.quartz.jobStore.driverDelegateClass是根据选择的数据库类型不同而不同，我这里的是mysql，
#所以是org.quartz.impl.jdbcjobstore.StdJDBCDelegate。
org.quartz.jobStore.class:org.quartz.impl.jdbcjobstore.JobStoreTX
org.quartz.jobStore.driverDelegateClass:org.quartz.impl.jdbcjobstore.StdJDBCDelegate
org.quartz.jobStore.useProperties:true

#============================================================================
#havent cluster spring
#============================================================================
org.quartz.jobStore.isClustered = false  

#
org.quartz.jobStore.tablePrefix:qrtz_
org.quartz.jobStore.dataSource:qzDS

#============================================================================
# Configure Datasources
#============================================================================
#
#org.quartz.dataSource.qzDS.driver:com.mysql.jdbc.Driver
#org.quartz.dataSource.qzDS.URL:jdbc:mysql://localhost:3306/quartz_test1
#org.quartz.dataSource.qzDS.user:root
#org.quartz.dataSource.qzDS.password:asd123456
#org.quartz.dataSource.qzDS.maxConnection:2